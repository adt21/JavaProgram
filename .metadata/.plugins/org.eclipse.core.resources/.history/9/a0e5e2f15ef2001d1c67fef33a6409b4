package binaryTrees;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class LevelWiseOrder {
	
	public static BinaryTreeNode<Integer> levelWiseTakeInput(){
		Scanner s = new Scanner(System.in);
		System.out.println("Enter root data");
		int rootData = s.nextInt();
		if(rootData == -1) {
			return null;
		}
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		//now a create a queue as level wise take input specifies FIFO manner
		Queue<BinaryTreeNode<Integer>> pendingChildren = new LinkedList<BinaryTreeNode<Integer>>(); //here inside type of queue we insert a node because we have to connect it with it's left child as well as it's right child but if we enter integer data only then we can't create connection between root and it's left child	}
		
		/***
		 * now we need to insert root data into queue then it's left / right child as well
		 */
		pendingChildren.add(root);//add root into queue
		
		//do this until unless queue is not null and first you have to remove your front of queue
		
	
	}
	public static void main(String[] args) {
		
	}

}
